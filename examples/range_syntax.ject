# Ject Range Syntax Showcase
# Python-inspired range syntax with step notation

print "Ject Range Syntax Showcase"
print ""

# Basic ranges
print "Basic Ranges:"
print "1..5: " + (1..5)
print "0..10: " + (0..10)
print "Empty range 5..5: " + (5..5)
print ""

# Ranges with steps
print "Ranges with Steps (using colon syntax):"
print "1..10:2 (odds): " + (1..10:2)
print "2..10:2 (evens): " + (2..10:2)  
print "0..20:5 (multiples of 5): " + (0..20:5)
print ""

# Reverse ranges
print "Reverse Ranges:"
print "10..0:-1: " + (10..0:-1)
print "20..0:-5: " + (20..0:-5)
print ""

# Comparing with traditional range() function
print "Traditional vs New Syntax:"
print "Traditional: range(1, 6) = " + range(1, 6)
print "New syntax:  1..6 = " + (1..6)
print "Traditional: range(0, 10, 2) = " + range(0, 10, 2)
print "New syntax:  0..10:2 = " + (0..10:2)
print ""

# Using in for loops
print "For Loops:"
print "Counting 1 to 5:"
for i in 1..6 do
    print "  Count: " + i
end

print "Even numbers 2 to 10:"
for i in 2..11:2 do
    print "  Even: " + i
end

print "Countdown from 5:"
for i in 5..0:-1 do
    print "  " + i + "..."
end
print "  Blast off!"
print ""

# Practical examples
print "Practical Examples:"

# Generate multiplication table
print "Multiplication table for 3:"
for i in 1..11 do
    print "3 Ã— " + i + " = " + (3 * i)
end
print ""

# Create a pattern
print "Creating a star pattern:"
for i in 1..6 do
    let stars = ""
    for j in 1..i+1 do
        stars = stars + "*"
    end
    print stars
end
print ""

# Using ranges with arrays
print "Generating squares with ranges:"
let squares = []
for i in 1..6 do
    print "Square of " + i + " is " + (i * i)
end
print ""

print "Ject's range syntax demonstration complete."
