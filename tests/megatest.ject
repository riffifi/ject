# Comprehensive Ject Test Suite
# Tests all language features and standard library functions

print "Ject Comprehensive Test Suite"
print "============================="
print ""

let test_count = 0
let pass_count = 0

fn test(name, condition)
    test_count = test_count + 1
    if condition
        print "PASS: " + name
        pass_count = pass_count + 1
    else
        print "FAIL: " + name
    end
end

# Basic data types and literals
print "Testing Basic Data Types:"
test("Integer literals", 42 == 42)
test("Float literals", 3.14 == 3.14)
test("String literals", "hello" == "hello")
test("Boolean literals", true == true and false == false)
test("Nil literal", nil == nil)
print ""

# Arithmetic operations
print "Testing Arithmetic:"
test("Addition", 5 + 3 == 8)
test("Subtraction", 10 - 4 == 6)
test("Multiplication", 6 * 7 == 42)
test("Division", 15 / 3 == 5.0)
test("Modulo", 17 % 5 == 2)
test("Float arithmetic", 2.5 + 1.5 == 4.0)
test("Mixed arithmetic", 5 + 2.5 == 7.5)
print ""

# Comparison operations
print "Testing Comparisons:"
test("Equality", 5 == 5)
test("Inequality", 5 != 3)
test("Less than", 3 < 5)
test("Greater than", 7 > 4)
test("Less or equal", 5 <= 5)
test("Greater or equal", 8 >= 8)
print ""

# Logical operations
print "Testing Logic:"
test("AND operation", true and true == true)
test("OR operation", true or false == true)
test("NOT operation", !false == true)
test("Complex logic", (true and false) or (true and true) == true)
print ""

# String operations
print "Testing Strings:"
test("String concatenation", "hello" + " " + "world" == "hello world")
test("String with number", "count: " + 5 == "count: 5")
test("String length", len("hello") == 5)
test("String uppercase", upper("hello") == "HELLO")
test("String lowercase", lower("HELLO") == "hello")
test("String trim", trim("  test  ") == "test")
print ""

# New string functions
print "Testing String Indexing/Slicing:"
test("Character at index", char_at("hello", 1) == "e")
test("Substring from index", substring("hello", 2) == "llo")
test("Substring range", substring("hello", 1, 4) == "ell")
test("String split", len(split("a,b,c", ",")) == 3)
test("String join", join(["a", "b", "c"], ",") == "a,b,c")
test("String replace", replace("hello world", "world", "Ject") == "hello Ject")
print ""

# Arrays
print "Testing Arrays:"
let arr = [1, 2, 3, 4, 5]
test("Array creation", len(arr) == 5)
test("Array indexing", arr[0] == 1 and arr[4] == 5)
test("Array with mixed types", len([1, "two", true, nil]) == 4)
test("Array push", len(push([1, 2], 3)) == 3)
test("Array pop", pop([1, 2, 3]) == 3)
print ""

# Mathematical functions
print "Testing Math Functions:"
test("Absolute value", abs(-42) == 42)
test("Square root", sqrt(16) == 4.0)
test("Power", pow(2, 3) == 8.0)
test("Floor", floor(3.7) == 3)
test("Ceiling", ceil(3.2) == 4)
test("Round", round(3.6) == 4)
test("Min", min(5, 3, 8, 1) == 1)
test("Max", max(5, 3, 8, 1) == 8)
print ""

# Trigonometric functions
print "Testing Trigonometry:"
test("Sine of PI/2", abs(sin(PI / 2) - 1) < 0.001)
test("Cosine of 0", abs(cos(0) - 1) < 0.001)
test("PI constant", abs(PI - 3.14159) < 0.01)
test("E constant", abs(E - 2.71828) < 0.01)
print ""

# Array functions
print "Testing Array Functions:"
let numbers = [1, 2, 3, 4, 5]
test("Array sum", sum(numbers) == 15)
test("Array length", len(numbers) == 5)
test("Range function", len(range(5)) == 5)
test("Range with start/end", range(2, 5)[0] == 2)
test("Range with step", range(0, 10, 2)[1] == 2)
print ""

# Ranges syntax
print "Testing Range Syntax:"
let range1 = 1..5
let range2 = 0..10:2
test("Basic range", len(range1) == 4)
test("Range with step", len(range2) == 5)
test("Range values", range1[0] == 1 and range1[3] == 4)
print ""

# Control flow
print "Testing Control Flow:"
let if_result = 0
if 5 > 3
    if_result = 1
end
test("If statement", if_result == 1)

let elseif_result = 0
if false
    elseif_result = 1
elseif true
    elseif_result = 2
else
    elseif_result = 3
end
test("Elseif statement", elseif_result == 2)

let while_result = 0
let i = 0
while i < 3 do
    while_result = while_result + 1
    i = i + 1
end
test("While loop", while_result == 3)

let for_result = 0
for x in [1, 2, 3] do
    for_result = for_result + x
end
test("For loop", for_result == 6)
print ""

# Functions
print "Testing Functions:"
fn add_two(x)
    return x + 2
end
test("Function definition and call", add_two(5) == 7)

fn fibonacci(n)
    if n <= 1
        return n
    else
        return fibonacci(n - 1) + fibonacci(n - 2)
    end
end
test("Recursive function", fibonacci(6) == 8)
print ""

# Lambda functions
print "Testing Lambda Functions:"
let square = lambda(x) -> x * x
test("Basic lambda", square(4) == 16)

let add = lambda(a, b) -> a + b
test("Multi-parameter lambda", add(3, 4) == 7)

let no_params = lambda() -> 42
test("No-parameter lambda", no_params() == 42)
print ""

# Variables and scope
print "Testing Variables:"
let global_var = "global"
test("Global variable", global_var == "global")

fn scope_test()
    let local_var = "local"
    global_var = "modified"
    return local_var
end
test("Local variable", scope_test() == "local")
test("Variable modification", global_var == "modified")
print ""

# Type checking
print "Testing Type System:"
test("Integer type", type_of(42) == "integer")
test("Float type", type_of(3.14) == "float")
test("String type", type_of("hello") == "string")
test("Boolean type", type_of(true) == "bool")
test("Array type", type_of([1, 2, 3]) == "array")
test("Function type", type_of(add_two) == "function")
test("Lambda type", type_of(square) == "lambda")
print ""

# File I/O
print "Testing File I/O:"
let test_content = "Hello, File I/O!"
write_file("test_file.txt", test_content)
let read_content = read_file("test_file.txt")
test("File write and read", read_content == test_content)
print ""

# JSON functionality
print "Testing JSON:"
let json_str = "{\"name\": \"Ject\", \"version\": 1, \"active\": true}"
let parsed = parse_json(json_str)
test("JSON parsing", len(parsed) == 3)

let simple_array = [1, 2, 3]
let json_output = to_json(simple_array)
test("JSON generation", json_output == "[1,2,3]")

let parsed_array = parse_json("[1,2,3]")
test("JSON array parsing", len(parsed_array) == 3)
print ""

# Error handling edge cases
print "Testing Edge Cases:"
test("Empty string length", len("") == 0)
test("Empty array length", len([]) == 0)
test("Division by one", 5 / 1 == 5.0)
test("Number comparison", 5 < 10)
test("Boolean truthiness", true and !false)
print ""

# Complex expressions
print "Testing Complex Expressions:"
let complex_result = (5 + 3) * 2 - 4 / 2
test("Complex arithmetic", complex_result == 14.0)

let nested_arrays = [[1, 2], [3, 4]]
test("Nested arrays", nested_arrays[1][0] == 3)

let chained_calls = upper(trim("  hello  "))
test("Chained function calls", chained_calls == "HELLO")
print ""

# Performance and stress tests
print "Testing Performance:"
let large_array = range(100)
test("Large array creation", len(large_array) == 100)

let sum_large = sum(large_array)
test("Large array sum", sum_large == 4950)

fn factorial(n)
    if n <= 1
        return 1
    else
        return n * factorial(n - 1)
    end
end
test("Deep recursion", factorial(10) == 3628800)
print ""

# Summary
print "Test Summary:"
print "============="
print "Total tests: " + test_count
print "Passed: " + pass_count
print "Failed: " + (test_count - pass_count)

if pass_count == test_count
    print "All tests passed! Ject is working perfectly."
else
    print "Some tests failed. Check the output above."
end
