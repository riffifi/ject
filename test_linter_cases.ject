# Test various linter cases

# 1. Using variable before declaration (should error)
# print undeclared_var

# 2. Unused variable (should warn)
let unused_var = 42

# 3. Variable with underscore prefix (should not warn about unused)
let _intentionally_unused = "test"

# 4. Variable shadowing in different scopes
let x = 1
if true then
    let x = 2  # This should be fine - different scope
    print x
end
print x

# 5. Variable in match pattern
let result = match 5
    n -> "got: " + n  # n is only available in this match arm
end
print result

# 6. Function parameter shadowing
fn test_func(x)
    let x = x + 1  # Should warn about shadowing parameter
    print x
end

# 7. Loop variable scope
for i in [1, 2, 3] do
    print i
end
# print i  # This would error - i not available outside loop

test_func(10)
